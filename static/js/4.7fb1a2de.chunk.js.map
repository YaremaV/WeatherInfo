{"version":3,"sources":["API/weather-api.js","views/Information/Information.js"],"names":["BASE_URL","KEY","fetchWithErrorHandling","a","url","fetch","response","ok","json","Promise","reject","Error","fetchSearch","cityName","fetchDetails","id","fetchFewDays","lon","lat","FiveDays","lazy","Information","useState","weather","setWeather","useRouteMatch","infoId","useParams","data","Date","location","useLocation","useEffect","moviesApi","then","className","toDateString","dt","slice","name","sys","country","Math","round","main","temp","map","value","alt","src","icon","feels_like","temp_min","temp_max","humidity","pressure","wind","speed","sunrise","toLocaleTimeString","sunset","to","pathname","state","from","type","fallback","color","height","width","timeout","path","coord"],"mappings":"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","file":"static/js/4.7fb1a2de.chunk.js","sourcesContent":["const BASE_URL = \"HTTPS://api.openweathermap.org/data/2.5/\";\nconst KEY = \"2d20223674e609e0aa7b3ad29d181f8b\";\n\nasync function fetchWithErrorHandling(url = \"\") {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error(\"Not found\"));\n}\n\nexport function fetchSearch(cityName) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}weather?q=${cityName}&appid=${KEY}`\n  );\n}\n\nexport function fetchDetails(id) {\n  return fetchWithErrorHandling(`${BASE_URL}weather?id=${id}&appid=${KEY}`);\n}\n\nexport function fetchFewDays(lon, lat) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}onecall?lat=${lat}&lon=${lon}&exclude=hourly&appid=${KEY}`\n  );\n}\n","import { useState, useEffect, lazy, Suspense } from \"react\";\nimport { useParams, Route, useRouteMatch, useLocation } from \"react-router\";\nimport { NavLink } from \"react-router-dom\";\nimport * as moviesApi from \"../../API/weather-api\";\nimport Loader from \"react-loader-spinner\";\nimport \"./information.css\";\n\nconst FiveDays = lazy(() => import(\"../../component/FiveDays/FiveDays\"));\n\nexport default function Information() {\n  const [weather, setWeather] = useState([]);\n  const { url } = useRouteMatch();\n  const { infoId } = useParams();\n  const data = new Date();\n  const location = useLocation();\n\n  useEffect(() => {\n    moviesApi.fetchDetails(infoId).then(setWeather);\n  }, [infoId]);\n\n  return (\n    <main>\n      {weather && (\n        <div className=\"cards__thumb \">\n          <div className=\"line__flex\">\n            <div>\n              <h3>{data.toDateString(weather.dt)?.slice(0, 10)}</h3>\n              <h2>\n                {weather.name}\n                <sup className=\"sup\">{weather?.sys?.country}</sup>\n              </h2>\n              <h1>{Math.round(weather?.main?.temp - 273.15)}&#176;C</h1>\n            </div>\n            <div className=\"row__flex\">\n              <p>{weather?.weather?.map((value) => value.main)}</p>\n              <img\n                alt={\"Weather Condition and City\"}\n                src={`HTTPS://openweathermap.org/img/wn/${weather?.weather?.map(\n                  (value) => value.icon\n                )}@2x.png`}\n              />\n            </div>\n          </div>\n\n          <div className=\"row__flex\">\n            <ul>\n              <li>\n                <p>\n                  Feels like: {Math.round(weather?.main?.feels_like - 273.15)}\n                  &#176;C\n                </p>\n              </li>\n              <li>\n                <p>\n                  min: {Math.round(weather?.main?.temp_min - 273.15)}\n                  &#176;C\n                </p>\n              </li>\n              <li>\n                <p>\n                  max: {Math.round(weather?.main?.temp_max - 273.15)}\n                  &#176;C\n                </p>\n              </li>\n            </ul>\n          </div>\n          <div className=\"row__flex\">\n            <p>Humidity: {weather.main?.humidity} %</p>\n            <p>Pressure: {weather.main?.pressure} mb</p>\n            <p>Wind: {weather?.wind?.speed} km/h</p>\n          </div>\n          <div>\n            <p className=\"sunrise-sunset\">\n              Sunrise:{\" \"}\n              {new Date(weather.sys?.sunrise * 1000).toLocaleTimeString(\n                \"en-IN\"\n              )}\n            </p>\n            <p className=\"sunrise-sunset\">\n              Sunset:{\" \"}\n              {new Date(weather.sys?.sunset * 1000).toLocaleTimeString(\"en-IN\")}\n            </p>\n          </div>\n        </div>\n      )}\n\n      <div>\n        <NavLink\n          to={{\n            pathname: `${url}/FiveDays`,\n            state: { from: location },\n          }}\n        >\n          <button className=\"button\" type=\"button\">\n            Load More\n          </button>\n        </NavLink>\n        <br />\n      </div>\n      <Suspense\n        fallback={\n          <Loader\n            type=\"ThreeDots\"\n            color=\"teal\"\n            height={300}\n            width={300}\n            timeout={3000}\n          />\n        }\n      >\n        <Route path={`${url}/FiveDays`}>\n          {weather && (\n            <FiveDays lon={weather?.coord?.lon} lat={weather?.coord?.lat} />\n          )}\n        </Route>\n      </Suspense>\n    </main>\n  );\n}\n"],"sourceRoot":""}