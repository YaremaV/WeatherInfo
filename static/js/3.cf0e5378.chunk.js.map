{"version":3,"sources":["API/weather-api.js","component/Searchbar/Searchbar.module.css","component/Searchbar/Searchbar.js","views/Home/Home.js"],"names":["BASE_URL","KEY","fetchWithErrorHandling","a","url","fetch","response","ok","json","Promise","reject","Error","fetchSearch","cityName","fetchDetails","id","fetchFewDays","lon","lat","module","exports","Searchbar","onSubmit","location","useLocation","useState","image","setImage","useEffect","queryValue","URLSearchParams","search","get","className","s","SearchForm","evt","preventDefault","trim","toast","error","position","theme","SearchFormInput","type","autoComplete","autoFocus","placeholder","value","onChange","EventTarget","currentTarget","toLowerCase","SearchFormButton","SearchFormButtonLabel","propType","PropTypes","string","func","WeatherContainer","lazy","WeatherList","SearchCountry","countries","setCountries","searchCountries","setSearchCountries","JSON","parse","window","localStorage","getItem","list","setList","setError","moviesApi","then","res","catch","setItem","stringify","message","main","weatherContainer","onClick","newEl","some","name","includes","alert","weather","onDeleteContacts","contactId","filter","upDate"],"mappings":"8OAAMA,EAAW,2CACXC,EAAM,mC,SAEGC,I,2EAAf,0CAAAC,EAAA,6DAAsCC,EAAtC,+BAA4C,GAA5C,SACyBC,MAAMD,GAD/B,YACQE,EADR,QAEkBC,GAFlB,iCAGYD,EAASE,OAHrB,gDAIMC,QAAQC,OAAO,IAAIC,MAAM,cAJ/B,mF,wBAOO,SAASC,EAAYC,GAC1B,OAAOX,EAAuB,GAAD,OACxBF,EADwB,qBACHa,EADG,kBACeZ,IAIvC,SAASa,EAAaC,GAC3B,OAAOb,EAAuB,GAAD,OAAIF,EAAJ,sBAA0Be,EAA1B,kBAAsCd,IAG9D,SAASe,EAAaC,EAAKC,GAChC,OAAOhB,EAAuB,GAAD,OACxBF,EADwB,uBACDkB,EADC,gBACUD,EADV,iCACsChB,M,mBCrBrEkB,EAAOC,QAAU,CAAC,WAAa,8BAA8B,iBAAmB,oCAAoC,oBAAoB,qCAAqC,sBAAwB,yCAAyC,gBAAkB,mCAAmC,mBAAmB,sC,iLCMvS,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAC5BC,EAAWC,cACjB,EAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACR,IAAMC,EAAa,IAAIC,gBAAgBP,EAASQ,QAAQC,IAAI,SAEzC,OAAfH,GAIJF,EAASE,KAER,IAoBH,OACE,wBAAQI,UAAWC,IAAEb,UAArB,SACE,uBAAMY,UAAWC,IAAEC,WAAYb,SAhBd,SAACc,GACpBA,EAAIC,iBAEiB,KAAjBX,EAAMY,QAOVhB,EAASI,GACTC,EAAS,KAPPY,IAAMC,MAAM,yCAA0C,CACpDC,SAAU,WACVC,MAAO,aAUT,UACE,uBACET,UAAWC,IAAES,gBACbC,KAAK,OACLC,aAAa,MACbC,WAAS,EACTC,YAAY,gCACZC,MAAOtB,EACPuB,SA5BkB,SAACC,GACzBvB,EAASuB,EAAYC,cAAcH,MAAMI,kBA6BrC,wBAAQR,KAAK,SAASX,UAAWC,IAAEmB,iBAAnC,SACE,sBAAMpB,UAAWC,IAAEoB,sBAAnB,2BAOVjC,EAAUkC,SAAW,CACnBP,MAAOQ,IAAUC,OACjBnC,SAAUkC,IAAUE,KACpBT,SAAUO,IAAUE,MC3DtB,IAAMC,EAAmBC,gBAAK,kBAC5B,gCAEIC,EAAcD,gBAAK,kBACvB,gCAGa,SAASE,IACtB,MAAkCrC,mBAAS,IAA3C,mBAAOsC,EAAP,KAAkBC,EAAlB,KACA,EAA8CvC,mBAAS,IAAvD,mBAAOwC,EAAP,KAAwBC,EAAxB,KACA,EAAwBzC,oBACtB,kCAAM0C,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,gBAA7C,QAAyD,MAD3D,mBAAOC,EAAP,KAAaC,EAAb,KAGA,EAA0BhD,mBAAS,MAAnC,mBAAOe,EAAP,KAAckC,EAAd,KAEA9C,qBAAU,WACU,KAAdmC,GAIJY,IACeZ,GACZa,MAAK,SAACC,GAAD,OAASX,EAAmBW,MACjCC,OAAM,SAACtC,GACNkC,EAASlC,QAEZ,CAACuB,IAEJnC,qBAAU,WACRyC,OAAOC,aAAaS,QAAQ,OAAQZ,KAAKa,UAAUR,MAClD,CAACA,IA0BJ,OACE,qCACE,cAAC,EAAD,CAAWlD,SA1BM,SAAC0B,GACpBgB,EAAahB,MA0BVR,GAAS,+DAAkCA,EAAMyC,WAClB,oBAAxBhB,EAAgBiB,KACtB,cAACvB,EAAD,CACEwB,iBAAkBlB,EAClBmB,QAvBQ,SAACC,IACX,OAAJb,QAAI,IAAJA,OAAA,EAAAA,EAAMc,MAAK,SAACtC,GAAD,OAASA,EAAMuC,KAAKC,SAASH,EAAME,UAC7CE,MAAM,GAAD,OAAIJ,EAAME,KAAV,wBACLd,EAAQ,CAACY,GAAF,mBAAYb,QAuBhB,wBAG8B,oBAAxBP,EAAgBiB,KACtB,cAACrB,EAAD,CACE6B,QAASlB,EACTmB,iBApCW,SAACC,GAClBnB,GAAQ,SAACD,GAAD,OAAUA,EAAKqB,QAAO,SAAC7C,GAAD,OAAWA,EAAMjC,KAAO6E,SAoChDE,OA1BS,WACfnB,IACeZ,GACZa,MAAK,SAACC,GAAD,OAASX,EAAmBW,MACjCC,OAAM,SAACtC,GACNkC,EAASlC,SAwBT","file":"static/js/3.cf0e5378.chunk.js","sourcesContent":["const BASE_URL = \"HTTPS://api.openweathermap.org/data/2.5/\";\r\nconst KEY = \"2d20223674e609e0aa7b3ad29d181f8b\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\") {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchSearch(cityName) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}weather?q=${cityName}&appid=${KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchDetails(id) {\r\n  return fetchWithErrorHandling(`${BASE_URL}weather?id=${id}&appid=${KEY}`);\r\n}\r\n\r\nexport function fetchFewDays(lon, lat) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}onecall?lat=${lat}&lon=${lon}&exclude=hourly&appid=${KEY}`\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SearchForm\":\"Searchbar_SearchForm__VYuWE\",\"SearchFormButton\":\"Searchbar_SearchFormButton__stK-r\",\"SearchForm-button\":\"Searchbar_SearchForm-button__1adC4\",\"SearchFormButtonLabel\":\"Searchbar_SearchFormButtonLabel__2BoPo\",\"SearchFormInput\":\"Searchbar_SearchFormInput__22ues\",\"SearchForm-input\":\"Searchbar_SearchForm-input__Fuwc7\"};","import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Searchbar.module.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const location = useLocation();\r\n  const [image, setImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const queryValue = new URLSearchParams(location.search).get(\"image\");\r\n\r\n    if (queryValue === null) {\r\n      return;\r\n    }\r\n\r\n    setImage(queryValue);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handleImageChange = (EventTarget) => {\r\n    setImage(EventTarget.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    if (image.trim() === \"\") {\r\n      toast.error(\"Please Enter countries to get weather!\", {\r\n        position: \"top-left\",\r\n        theme: \"colored\",\r\n      });\r\n      return;\r\n    }\r\n    onSubmit(image);\r\n    setImage(\"\");\r\n  };\r\n\r\n  return (\r\n    <header className={s.Searchbar}>\r\n      <form className={s.SearchForm} onSubmit={handleSubmit}>\r\n        <input\r\n          className={s.SearchFormInput}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Get weather in your countries\"\r\n          value={image}\r\n          onChange={handleImageChange}\r\n        />\r\n        <button type=\"submit\" className={s.SearchFormButton}>\r\n          <span className={s.SearchFormButtonLabel}>Search</span>\r\n        </button>\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propType = {\r\n  value: PropTypes.string,\r\n  onSubmit: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n};\r\n","import { useState, useEffect, lazy } from \"react\";\r\nimport * as moviesApi from \"../../API/weather-api\";\r\nimport SearchBar from \"../../component/Searchbar/Searchbar\";\r\n\r\nconst WeatherContainer = lazy(() =>\r\n  import(\"../../component/WeatherContainer/WeatherContainer\")\r\n);\r\nconst WeatherList = lazy(() =>\r\n  import(\"../../component/WeatherList/WeatherList\")\r\n);\r\n\r\nexport default function SearchCountry() {\r\n  const [countries, setCountries] = useState(\"\");\r\n  const [searchCountries, setSearchCountries] = useState([]);\r\n  const [list, setList] = useState(\r\n    () => JSON.parse(window.localStorage.getItem(\"list\")) ?? []\r\n  );\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (countries === \"\") {\r\n      return;\r\n    }\r\n\r\n    moviesApi\r\n      .fetchSearch(countries)\r\n      .then((res) => setSearchCountries(res))\r\n      .catch((error) => {\r\n        setError(error);\r\n      });\r\n  }, [countries]);\r\n\r\n  useEffect(() => {\r\n    window.localStorage.setItem(\"list\", JSON.stringify(list));\r\n  }, [list]);\r\n\r\n  const handleSubmit = (value) => {\r\n    setCountries(value);\r\n  };\r\n\r\n  const deleteCard = (contactId) => {\r\n    setList((list) => list.filter((value) => value.id !== contactId));\r\n  };\r\n\r\n  const addCard = (newEl) => {\r\n    list?.some((value)=>value.name.includes(newEl.name))\r\n    ?alert(`${newEl.name} is already in list`)\r\n    :setList([newEl, ...list]);\r\n    // console.log(list?.map((value)=>value.name));\r\n  };\r\n\r\n  const onUpdate = () => {\r\n    moviesApi\r\n      .fetchSearch(countries)\r\n      .then((res) => setSearchCountries(res))\r\n      .catch((error) => {\r\n        setError(error);\r\n      });\r\n  };\r\n  // const filtered = Array.from(new Set(list));\r\n  return (\r\n    <>\r\n      <SearchBar onSubmit={handleSubmit} />\r\n      {error && <p>Whoops, something went wrong: {error.message}</p>}\r\n      {typeof searchCountries.main != \"undefined\" ? (\r\n        <WeatherContainer\r\n          weatherContainer={searchCountries}\r\n          onClick={addCard}\r\n        />\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n\r\n      {typeof searchCountries.main != \"undefined\" ? (\r\n        <WeatherList\r\n          weather={list}\r\n          onDeleteContacts={deleteCard}\r\n          upDate={onUpdate}\r\n        />\r\n      ) : (\r\n        <div></div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\n// const mapStateToProps = (state, ownProps) => {\r\n//   return {\r\n//     searchCountries: state.searchCountries,\r\n//   };\r\n// };\r\n\r\n// const mapDispatchToProps = (dispatch) => {\r\n//   return {\r\n//     createCard: (searchCountries) =>\r\n//       dispatch(action.createCard(searchCountries)),\r\n//     deleteCard: (index) => dispatch(action.deleteCard(index)),\r\n//   };\r\n// };\r\n\r\n// export default connect(mapStateToProps, mapDispatchToProps)(SearchCountry);\r\n"],"sourceRoot":""}