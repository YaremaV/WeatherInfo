{"version":3,"sources":["API/weather-api.js","component/Searchbar/Searchbar.js","component/WeatherContainer/WeatherContainer.js","component/Geolocation/Geolocation.js","views/Home/Home.js"],"names":["BASE_URL","KEY","fetchWithErrorHandling","a","url","fetch","response","ok","json","Promise","reject","Error","fetchSearch","cityName","fetchDetails","id","Searchbar","onSubmit","location","useLocation","useState","image","setImage","useEffect","queryValue","URLSearchParams","search","get","className","s","SearchForm","evt","preventDefault","trim","toast","error","position","theme","SearchFormInput","type","autoComplete","autoFocus","placeholder","value","onChange","EventTarget","currentTarget","toLowerCase","SearchFormButton","SearchFormButtonLabel","propType","PropTypes","string","func","WeatherContainer","temp","city","icon","desc","onClick","useRouteMatch","to","alt","src","Math","round","Geolocation","lat","setLat","long","setLong","data","setData","fetchData","navigator","geolocation","getCurrentPosition","coords","latitude","longitude","then","res","result","console","log","name","moment","format","weather","map","main","humidity","Date","sys","sunrise","toLocaleTimeString","sunset","SearchCountry","countries","setCountries","searchCountries","setSearchCountries","setList","setError","moviesApi","catch","description","pressure","wind","speed","visibility","newCard"],"mappings":"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","file":"static/js/3.c9303aed.chunk.js","sourcesContent":["const BASE_URL = \"HTTPS://api.openweathermap.org/data/2.5/\";\r\nconst KEY = \"2d20223674e609e0aa7b3ad29d181f8b\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\") {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchSearch(cityName) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}weather?q=${cityName}&appid=${KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchDetails(id) {\r\n  return fetchWithErrorHandling(`${BASE_URL}weather?id=${id}&appid=${KEY}`);\r\n}\r\n\r\nexport function fetchFiveDays(id) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}forecast/daily?id=${id}&appid=${KEY}`\r\n  );\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\nimport PropTypes from \"prop-types\";\r\nimport s from \"./Searchbar.module.css\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nexport default function Searchbar({ onSubmit }) {\r\n  const location = useLocation();\r\n  const [image, setImage] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    const queryValue = new URLSearchParams(location.search).get(\"image\");\r\n\r\n    if (queryValue === null) {\r\n      return;\r\n    }\r\n\r\n    setImage(queryValue);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const handleImageChange = (EventTarget) => {\r\n    setImage(EventTarget.currentTarget.value.toLowerCase());\r\n  };\r\n\r\n  const handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    if (image.trim() === \"\") {\r\n      toast.error(\"Please Enter countries to get weather!\", {\r\n        position: \"top-left\",\r\n        theme: \"colored\",\r\n      });\r\n      return;\r\n    }\r\n    onSubmit(image);\r\n    setImage(\"\");\r\n  };\r\n\r\n  return (\r\n    <header className={s.Searchbar}>\r\n      <form className={s.SearchForm} onSubmit={handleSubmit}>\r\n        <input\r\n          className={s.SearchFormInput}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          placeholder=\"Get weather in your countries\"\r\n          value={image}\r\n          onChange={handleImageChange}\r\n        />\r\n        <button type=\"submit\" className={s.SearchFormButton}>\r\n          <span className={s.SearchFormButtonLabel}>Search</span>\r\n        </button>\r\n      </form>\r\n    </header>\r\n  );\r\n}\r\n\r\nSearchbar.propType = {\r\n  value: PropTypes.string,\r\n  onSubmit: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n};\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useRouteMatch, useHistory, useLocation } from \"react-router\";\r\nimport \"./weather.css\";\r\n\r\nexport default function WeatherContainer({\r\n  id,\r\n  temp,\r\n  city,\r\n  icon,\r\n  desc,\r\n  onClick,\r\n}) {\r\n  const { url } = useRouteMatch();\r\n  return (\r\n    <main className=\"container\">\r\n      <ul className=\"row\">\r\n        <li key={id} className=\"container-medium main\">\r\n          <Link to={`/Information/${id}`}>\r\n            <img\r\n              alt={\"Weather Condition and City\"}\r\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n            />\r\n\r\n            <h1>{Math.round(temp - 273.15)} &#176;C</h1>\r\n            <h2>{city} </h2>\r\n            <p>{desc}</p>\r\n          </Link>\r\n          <div className=\"d-grid gap-2 d-md-block\">\r\n            {/* <button className=\"btn btn-primary\" type=\"button\">\r\n              Add\r\n            </button> */}\r\n            <button onClick={onClick} className=\"btn btn-primary\" type=\"button\">\r\n              Add\r\n            </button>\r\n          </div>\r\n        </li>\r\n      </ul>\r\n    </main>\r\n\r\n    /* <ul>\r\n        <Link to={`/${url}/${id}`}>\r\n          <li key={id}> */\r\n    /* <h2>{sys.country}</h2> */\r\n    /* <p> {city}</p> */\r\n    /* <p> {Date(dt).toString()}</p> */\r\n\r\n    /* <p>\r\n              Temperature: {Math.round(temp - 273.15)}\r\n              &#176;C */\r\n    /* <span>\r\n        min: {Math.round(searchCountries?.main?.temp_min - 273.15)}\r\n        &#176;C\r\n      </span>\r\n      <span>\r\n        max: {Math.round(searchCountries?.main?.temp_max - 273.15)}\r\n        &#176;C\r\n      </span> */\r\n    /* </p>\r\n            <p>Влажность:{humidity}%</p>\r\n            <p>Давление: {pressure} мм рт. ст.</p>\r\n            <div>\r\n              <button type=\"button\">Add </button> */\r\n    /* <button type=\"button\" onClick={removeCard}> */\r\n    /* Delete\r\n      </button> */\r\n    /* </div> */\r\n    /* </li> */\r\n    /* //     </Link> */\r\n    /* //   </ul> */\r\n    /* // </main> */\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport moment from 'moment';\r\nimport './geolocation.css'\r\n\r\n\r\nconst URL = 'https://api.openweathermap.org/data/2.5'\r\nconst KEY = \"2d20223674e609e0aa7b3ad29d181f8b\"\r\nconst EACT_APP_ICON_URL = 'https://openweathermap.org/img/w'\r\n\r\nexport default function Geolocation() {\r\n\r\n  const [lat, setLat] = useState([]);\r\n  const [long, setLong] = useState([]);\r\n  const [data, setData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      navigator.geolocation.getCurrentPosition(function(position) {\r\n        setLat(position.coords.latitude);\r\n        setLong(position.coords.longitude);\r\n      });\r\n\r\n      await fetch(`${URL}/weather/?lat=${lat}&lon=${long}&units=metric&APPID=${KEY}`)\r\n      .then(res => res.json())\r\n      .then(result => {\r\n        setData(result)\r\n        console.log(result);\r\n      });\r\n    }\r\n    fetchData();\r\n  }, [lat,long])\r\n\r\n  return (\r\n    <div >\r\n     {data &&( \r\n    <div className=\"main\">\r\n    <p className=\"header\">{data.name}</p>\r\n    \r\n    <div className=\"flex\">\r\n      \r\n      <p className=\"day\">{moment().format('dddd')}, <span>{moment().format('LL')}</span></p>\\ <img\r\n              alt={\"Weather Condition and City\"}\r\n              src={`http://openweathermap.org/img/wn/${data?.weather?.map((value) => value.icon)}@2x.png`}\r\n            />\r\n      <p className=\"description\">{data.weather?.map(value=>value.main)}</p>\r\n     \r\n    </div>\r\n\r\n    <div className=\"flex\">\r\n      <p className=\"temp\">Temprature: {Math.round(data.main?.temp)} &deg;C</p>\r\n      <p className=\"temp\">Humidity: {data.main?.humidity} %</p>\r\n    </div>\r\n\r\n    <div className=\"flex\">\r\n      <p className=\"sunrise-sunset\">Sunrise: {new Date(data.sys?.sunrise * 1000).toLocaleTimeString('en-IN')}</p>\r\n      <p className=\"sunrise-sunset\">Sunset: {new Date(data.sys?.sunset * 1000).toLocaleTimeString('en-IN')}</p>\r\n    </div>\r\n  \r\n</div>)}\r\n    </div>\r\n  );\r\n}\r\n\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useRouteMatch, useHistory, useLocation } from \"react-router\";\r\nimport * as moviesApi from \"../../API/weather-api\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport SearchBar from \"../../component/Searchbar/Searchbar\";\r\nimport WeatherContainer from \"../../component/WeatherContainer/WeatherContainer\";\r\nimport WeatherList from \"../../component/WeatherList/WeatherList\";\r\nimport Geolocation from \"../../component/Geolocation/Geolocation\"\r\n\r\nexport default function SearchCountry() {\r\n  const { url } = useRouteMatch();\r\n  const [countries, setCountries] = useState(\"\");\r\n  const [searchCountries, setSearchCountries] = useState([]);\r\n  const [list, setList] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    if (countries === \"\") {\r\n      return;\r\n    }\r\n\r\n    moviesApi\r\n      .fetchSearch(countries)\r\n      .then((res) => setSearchCountries(res))\r\n      .catch((error) => {\r\n        setError(error);\r\n      });\r\n  }, [countries]);\r\n\r\n  \r\n\r\n  const handleSubmit = (value) => {\r\n    setCountries(value);\r\n  };\r\n\r\n  // const removeCard = (contactId) => {\r\n  //   setList((list) => list.filter((value) => value.id !== contactId));\r\n  // };\r\n\r\n  const addCard = (newCard) => {\r\n    console.log(\"click\");\r\n    const normValue = newCard.name?.toLowerCase();\r\n    // newCard.id = uuidv4();\r\n    setList({ newCard, ...searchCountries });\r\n    // searchCountries.some(({ name }) => name?.toLowerCase() === normValue)\r\n    //   ? alert(`${newCard.name} is already in contacts`)\r\n    //   : setSearchCountries({ newCard, ...searchCountries });\r\n  };\r\n\r\n  // const onUpdate = () => {\r\n  //   moviesApi\r\n  //     .fetchSearch(countries)\r\n  //     .then((res) => setSearchCountries(res))\r\n  //     .catch((error) => {\r\n  //       setError(error);\r\n  //     });\r\n  // };\r\n\r\n  return (\r\n    <>\r\n      <SearchBar onSubmit={handleSubmit} />\r\n\r\n      {countries && (\r\n        <WeatherContainer\r\n          id={searchCountries.id}\r\n          temp={searchCountries?.main?.temp}\r\n          city={searchCountries.name}\r\n          icon={searchCountries?.weather?.map((value) => value.icon)}\r\n          desc={searchCountries?.weather?.map((value) => value.description)}\r\n          humidity={searchCountries.main?.humidity}\r\n          pressure={searchCountries.main?.pressure}\r\n          wind={searchCountries.wind?.speed}\r\n          visibility={searchCountries?.visibility}\r\n          onClick={addCard}\r\n        />\r\n      )}\r\n      <Geolocation/>\r\n      {/* {list && <WeatherList weather={list} />} */}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}