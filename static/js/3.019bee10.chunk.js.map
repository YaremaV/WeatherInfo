{"version":3,"sources":["API/weather-api.js","component/Searchbar/Searchbar.js","component/WeatherContainer/WeatherContainer.js","component/WeatherList/WeatherList.js","views/Home/Home.js"],"names":["BASE_URL","KEY","fetchWithErrorHandling","a","url","fetch","response","ok","json","Promise","reject","Error","fetchSearch","cityName","fetchDetails","id","Searchbar","onSubmit","location","useLocation","useState","image","setImage","useEffect","queryValue","URLSearchParams","search","get","className","s","SearchForm","evt","preventDefault","trim","toast","error","position","theme","SearchFormInput","type","autoComplete","autoFocus","placeholder","value","onChange","EventTarget","currentTarget","toLowerCase","SearchFormButton","SearchFormButtonLabel","propType","PropTypes","string","func","WeatherContainer","temp","city","icon","desc","onClick","useRouteMatch","to","alt","src","Math","round","WeatherList","weather","onDeleteContacts","map","descr","description","console","log","main","name","button","SearchCountry","countries","setCountries","searchCountries","setSearchCountries","list","setList","setError","moviesApi","then","res","catch","humidity","pressure","wind","speed","visibility","newCard"],"mappings":"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","file":"static/js/3.019bee10.chunk.js","sourcesContent":["const BASE_URL = \"HTTPS://api.openweathermap.org/data/2.5/\";\nconst KEY = \"2d20223674e609e0aa7b3ad29d181f8b\";\n\nasync function fetchWithErrorHandling(url = \"\") {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error(\"Not found\"));\n}\n\nexport function fetchSearch(cityName) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}weather?q=${cityName}&appid=${KEY}`\n  );\n}\n\nexport function fetchDetails(id) {\n  return fetchWithErrorHandling(`${BASE_URL}weather?id=${id}&appid=${KEY}`);\n}\n\nexport function fetchFiveDays(id) {\n  return fetchWithErrorHandling(\n    `${BASE_URL}forecast/daily?id=${id}&appid=${KEY}`\n  );\n  // api.openweathermap.org/data/2.5/forecast/daily?id=524901&appid={API key}\n}\n\n// api.openweathermap.org/data/2.5/forecast?id={city ID}&appid={API key}\n","import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Searchbar.module.css\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nexport default function Searchbar({ onSubmit }) {\n  const location = useLocation();\n  const [image, setImage] = useState(\"\");\n\n  useEffect(() => {\n    const queryValue = new URLSearchParams(location.search).get(\"image\");\n\n    if (queryValue === null) {\n      return;\n    }\n\n    setImage(queryValue);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleImageChange = (EventTarget) => {\n    setImage(EventTarget.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (image.trim() === \"\") {\n      toast.error(\"Please Enter countries to get weather!\", {\n        position: \"top-left\",\n        theme: \"colored\",\n      });\n      return;\n    }\n    onSubmit(image);\n    setImage(\"\");\n  };\n\n  return (\n    <header className={s.Searchbar}>\n      <form className={s.SearchForm} onSubmit={handleSubmit}>\n        <input\n          className={s.SearchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Get weather in your countries\"\n          value={image}\n          onChange={handleImageChange}\n        />\n        <button type=\"submit\" className={s.SearchFormButton}>\n          <span className={s.SearchFormButtonLabel}>Search</span>\n        </button>\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propType = {\n  value: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onChange: PropTypes.func,\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useRouteMatch, useHistory, useLocation } from \"react-router\";\nimport \"./weather.css\";\n\nexport default function WeatherContainer({\n  id,\n  temp,\n  city,\n  icon,\n  desc,\n  onClick,\n}) {\n  const { url } = useRouteMatch();\n  return (\n    <main className=\"container\">\n      <ul className=\"row\">\n        <li key={id} className=\"container-medium main\">\n          <Link to={`/Information/${id}`}>\n            <img\n              alt={\"Weather Condition and City\"}\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n            />\n\n            <h1>{Math.round(temp - 273.15)} &#176;C</h1>\n            <h2>{city} </h2>\n            <p>{desc}</p>\n          </Link>\n          <div className=\"d-grid gap-2 d-md-block\">\n            {/* <button className=\"btn btn-primary\" type=\"button\">\n              Add\n            </button> */}\n            <button onClick={onClick} className=\"btn btn-primary\" type=\"button\">\n              Add\n            </button>\n          </div>\n        </li>\n      </ul>\n    </main>\n\n    /* <ul>\n        <Link to={`/${url}/${id}`}>\n          <li key={id}> */\n    /* <h2>{sys.country}</h2> */\n    /* <p> {city}</p> */\n    /* <p> {Date(dt).toString()}</p> */\n\n    /* <p>\n              Temperature: {Math.round(temp - 273.15)}\n              &#176;C */\n    /* <span>\n        min: {Math.round(searchCountries?.main?.temp_min - 273.15)}\n        &#176;C\n      </span>\n      <span>\n        max: {Math.round(searchCountries?.main?.temp_max - 273.15)}\n        &#176;C\n      </span> */\n    /* </p>\n            <p>Влажность:{humidity}%</p>\n            <p>Давление: {pressure} мм рт. ст.</p>\n            <div>\n              <button type=\"button\">Add </button> */\n    /* <button type=\"button\" onClick={removeCard}> */\n    /* Delete\n      </button> */\n    /* </div> */\n    /* </li> */\n    /* //     </Link> */\n    /* //   </ul> */\n    /* // </main> */\n  );\n}\n","import React from \"react\";\r\nimport s from \"./WeatherList.module.css\";\r\n\r\nexport default function WeatherList({ weather, onDeleteContacts }) {\r\n  const icon = weather?.weather?.map((value) => value.icon);\r\n  const descr = weather?.weather?.map((value) => value.description);\r\n  return (\r\n    <ul className=\"contacts\">\r\n      {console.log(weather)}\r\n      <li key={weather.id}>\r\n        <img\r\n          alt={\"Weather Condition and City\"}\r\n          src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\r\n        />\r\n        <h1>{Math.round(weather?.main?.temp - 273.15)} &#176;C</h1>\r\n        <h2>{weather.name} </h2>\r\n        <p>{descr}</p>\r\n        <button\r\n          button\r\n          type=\"button\"\r\n          className=\"TodoList__btn\"\r\n          onClick={() => onDeleteContacts(weather.id)}\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    </ul>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useRouteMatch, useHistory, useLocation } from \"react-router\";\nimport * as moviesApi from \"../../API/weather-api\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport SearchBar from \"../../component/Searchbar/Searchbar\";\nimport WeatherContainer from \"../../component/WeatherContainer/WeatherContainer\";\nimport WeatherList from \"../../component/WeatherList/WeatherList\";\n\nexport default function SearchCountry() {\n  const { url } = useRouteMatch();\n  const [countries, setCountries] = useState(\"\");\n  const [searchCountries, setSearchCountries] = useState([]);\n  const [list, setList] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (countries === \"\") {\n      return;\n    }\n\n    moviesApi\n      .fetchSearch(countries)\n      .then((res) => setSearchCountries(res))\n      .catch((error) => {\n        setError(error);\n      });\n  }, [countries]);\n\n  const handleSubmit = (value) => {\n    setCountries(value);\n  };\n\n  // const removeCard = (contactId) => {\n  //   setList((list) => list.filter((value) => value.id !== contactId));\n  // };\n\n  const addCard = (newCard) => {\n    console.log(\"click\");\n    const normValue = newCard.name?.toLowerCase();\n    // newCard.id = uuidv4();\n    setList({ newCard, ...searchCountries });\n    // searchCountries.some(({ name }) => name?.toLowerCase() === normValue)\n    //   ? alert(`${newCard.name} is already in contacts`)\n    //   : setSearchCountries({ newCard, ...searchCountries });\n  };\n\n  // const onUpdate = () => {\n  //   moviesApi\n  //     .fetchSearch(countries)\n  //     .then((res) => setSearchCountries(res))\n  //     .catch((error) => {\n  //       setError(error);\n  //     });\n  // };\n\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit} />\n\n      {countries && (\n        <WeatherContainer\n          id={searchCountries.id}\n          temp={searchCountries?.main?.temp}\n          city={searchCountries.name}\n          icon={searchCountries?.weather?.map((value) => value.icon)}\n          desc={searchCountries?.weather?.map((value) => value.description)}\n          humidity={searchCountries.main?.humidity}\n          pressure={searchCountries.main?.pressure}\n          wind={searchCountries.wind?.speed}\n          visibility={searchCountries?.visibility}\n          onClick={addCard}\n        />\n      )}\n      {list && <WeatherList weather={list} />}\n    </>\n  );\n}\n"],"sourceRoot":""}