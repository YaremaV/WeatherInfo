{"version":3,"sources":["component/Searchbar/Searchbar.js","component/WeatherContainer/WeatherContainer.js","views/Home/Home.js"],"names":["Searchbar","onSubmit","location","useLocation","useState","image","setImage","useEffect","queryValue","URLSearchParams","search","get","className","s","SearchForm","evt","preventDefault","trim","toast","error","position","theme","SearchFormInput","type","autoComplete","autoFocus","placeholder","value","onChange","EventTarget","currentTarget","toLowerCase","SearchFormButton","SearchFormButtonLabel","propType","PropTypes","string","func","WeatherContainer","id","temp","city","icon","desc","onClick","useRouteMatch","url","to","alt","src","Math","round","SearchCountry","countries","setCountries","searchCountries","setSearchCountries","setError","moviesApi","then","res","catch","main","name","weather","map","description","humidity","pressure","wind","speed","visibility"],"mappings":"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","file":"static/js/3.e2a537cb.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router\";\nimport PropTypes from \"prop-types\";\nimport s from \"./Searchbar.module.css\";\nimport { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\nexport default function Searchbar({ onSubmit }) {\n  const location = useLocation();\n  const [image, setImage] = useState(\"\");\n\n  useEffect(() => {\n    const queryValue = new URLSearchParams(location.search).get(\"image\");\n\n    if (queryValue === null) {\n      return;\n    }\n\n    setImage(queryValue);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const handleImageChange = (EventTarget) => {\n    setImage(EventTarget.currentTarget.value.toLowerCase());\n  };\n\n  const handleSubmit = (evt) => {\n    evt.preventDefault();\n\n    if (image.trim() === \"\") {\n      toast.error(\"Please Enter countries to get weather!\", {\n        position: \"top-left\",\n        theme: \"colored\",\n      });\n      return;\n    }\n    onSubmit(image);\n    setImage(\"\");\n  };\n\n  return (\n    <header className={s.Searchbar}>\n      <form className={s.SearchForm} onSubmit={handleSubmit}>\n        <input\n          className={s.SearchFormInput}\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Get weather in your countries\"\n          value={image}\n          onChange={handleImageChange}\n        />\n        <button type=\"submit\" className={s.SearchFormButton}>\n          <span className={s.SearchFormButtonLabel}>Search</span>\n        </button>\n      </form>\n    </header>\n  );\n}\n\nSearchbar.propType = {\n  value: PropTypes.string,\n  onSubmit: PropTypes.func,\n  onChange: PropTypes.func,\n};\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useRouteMatch, useHistory, useLocation } from \"react-router\";\nimport \"./weather.css\";\n\nexport default function WeatherContainer({\n  id,\n  temp,\n  city,\n  icon,\n  desc,\n  onClick,\n}) {\n  const { url } = useRouteMatch();\n  return (\n    <main className=\"container\">\n      <ul className=\"row\">\n        <Link to={`/Information/${id}`}>\n          <li key={id} className=\"container-medium main\">\n            <img\n              alt={\"Weather Condition and City\"}\n              src={`http://openweathermap.org/img/wn/${icon}@2x.png`}\n            />\n            <div>\n              <h1>{Math.round(temp - 273.15)} &#176;C</h1>\n              <h2>{city} </h2>\n              <p>{desc}</p>\n              <div className=\"d-grid gap-2 d-md-block\">\n                <button className=\"btn btn-primary\" type=\"button\">\n                  Add\n                </button>\n                <button\n                  onClick={onClick}\n                  className=\"btn btn-primary\"\n                  type=\"button\"\n                >\n                  Update\n                </button>\n              </div>\n            </div>\n          </li>\n        </Link>\n      </ul>\n    </main>\n\n    /* <ul>\n        <Link to={`/${url}/${id}`}>\n          <li key={id}> */\n    /* <h2>{sys.country}</h2> */\n    /* <p> {city}</p> */\n    /* <p> {Date(dt).toString()}</p> */\n\n    /* <p>\n              Temperature: {Math.round(temp - 273.15)}\n              &#176;C */\n    /* <span>\n        min: {Math.round(searchCountries?.main?.temp_min - 273.15)}\n        &#176;C\n      </span>\n      <span>\n        max: {Math.round(searchCountries?.main?.temp_max - 273.15)}\n        &#176;C\n      </span> */\n    /* </p>\n            <p>Влажность:{humidity}%</p>\n            <p>Давление: {pressure} мм рт. ст.</p>\n            <div>\n              <button type=\"button\">Add </button> */\n    /* <button type=\"button\" onClick={removeCard}> */\n    /* Delete\n      </button> */\n    /* </div> */\n    /* </li> */\n    /* //     </Link> */\n    /* //   </ul> */\n    /* // </main> */\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useRouteMatch, useHistory, useLocation } from \"react-router\";\nimport * as moviesApi from \"../../API/weather-api\";\nimport SearchBar from \"../../component/Searchbar/Searchbar\";\nimport WeatherContainer from \"../../component/WeatherContainer/WeatherContainer\";\n\nexport default function SearchCountry() {\n  const { url } = useRouteMatch();\n  const [countries, setCountries] = useState(\"\");\n  const [searchCountries, setSearchCountries] = useState([]);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    if (countries === \"\") {\n      return;\n    }\n\n    moviesApi\n      .fetchSearch(countries)\n      .then((res) => setSearchCountries(res))\n      .catch((error) => {\n        setError(error);\n      });\n  }, [countries]);\n\n  const handleSubmit = (value) => {\n    setCountries(value);\n  };\n  const removeCard = () => {};\n  // deleteTodo = todoId => {\n  //   this.setState(prevState => ({\n  //     todos: prevState.todos.filter(todo => todo.id !== todoId),\n  //   }));\n  // };\n\n  // const onUpdate = () => {\n  //   moviesApi\n  //     .fetchSearch(countries)\n  //     .then((res) => setSearchCountries(res))\n  //     .catch((error) => {\n  //       setError(error);\n  //     });\n  // };\n  return (\n    <>\n      <SearchBar onSubmit={handleSubmit} />\n\n      {countries && (\n        <WeatherContainer\n          id={searchCountries.id}\n          temp={searchCountries?.main?.temp}\n          city={searchCountries.name}\n          icon={searchCountries?.weather?.map((value) => value.icon)}\n          desc={searchCountries?.weather?.map((value) => value.description)}\n          humidity={searchCountries.main?.humidity}\n          pressure={searchCountries.main?.pressure}\n          wind={searchCountries.wind?.speed}\n          visibility={searchCountries?.visibility}\n          // onClick={onUpdate}\n        />\n      )}\n    </>\n  );\n}\n"],"sourceRoot":""}