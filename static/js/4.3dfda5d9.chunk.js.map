{"version":3,"sources":["API/weather-api.js","views/Information/Information.js"],"names":["BASE_URL","KEY","fetchWithErrorHandling","a","url","fetch","response","ok","json","Promise","reject","Error","fetchSearch","cityName","fetchDetails","id","fetchFewDays","lon","lat","FiveDays","lazy","Information","useState","weather","setWeather","useRouteMatch","infoId","useParams","data","Date","location","useLocation","useEffect","moviesApi","then","className","toDateString","dt","slice","name","sys","country","Math","round","main","temp","map","value","alt","src","icon","feels_like","temp_min","temp_max","humidity","pressure","wind","speed","sunrise","toLocaleTimeString","sunset","to","pathname","state","from","type","fallback","color","height","width","timeout","path","coord"],"mappings":"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","file":"static/js/4.3dfda5d9.chunk.js","sourcesContent":["const BASE_URL = \"HTTPS://api.openweathermap.org/data/2.5/\";\r\nconst KEY = \"2d20223674e609e0aa7b3ad29d181f8b\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\") {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchSearch(cityName) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}weather?q=${cityName}&appid=${KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchDetails(id) {\r\n  return fetchWithErrorHandling(`${BASE_URL}weather?id=${id}&appid=${KEY}`);\r\n}\r\n\r\nexport function fetchFewDays(lon, lat) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}onecall?lat=${lat}&lon=${lon}&exclude=hourly&appid=${KEY}`\r\n  );\r\n}\r\n","import { useState, useEffect, lazy, Suspense } from \"react\";\r\nimport { useParams, Route, useRouteMatch, useLocation } from \"react-router\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport * as moviesApi from \"../../API/weather-api\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"./information.css\";\r\n\r\nconst FiveDays = lazy(() => import(\"../../component/FiveDays/FiveDays\"));\r\n\r\nexport default function Information() {\r\n  const [weather, setWeather] = useState([]);\r\n  const { url } = useRouteMatch();\r\n  const { infoId } = useParams();\r\n  const data = new Date();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    moviesApi.fetchDetails(infoId).then(setWeather);\r\n  }, [infoId]);\r\n\r\n  return (\r\n    <main>\r\n      {weather && (\r\n        <div className=\"cards__thumb \">\r\n          <div className=\"line__flex\">\r\n            <div>\r\n              <h3>{data.toDateString(weather.dt)?.slice(0, 10)}</h3>\r\n              <h2>\r\n                {weather.name}\r\n                <sup className=\"sup\">{weather?.sys?.country}</sup>\r\n              </h2>\r\n              <h1>{Math.round(weather?.main?.temp - 273.15)}&#176;C</h1>\r\n            </div>\r\n            <div className=\"row__flex\">\r\n              <p>{weather?.weather?.map((value) => value.main)}</p>\r\n              <img\r\n                alt={\"Weather Condition and City\"}\r\n                src={`HTTPS://openweathermap.org/img/wn/${weather?.weather?.map(\r\n                  (value) => value.icon\r\n                )}@2x.png`}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row__flex\">\r\n            <ul>\r\n              <li>\r\n                <p>\r\n                  Feels like: {Math.round(weather?.main?.feels_like - 273.15)}\r\n                  &#176;C\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <p>\r\n                  min: {Math.round(weather?.main?.temp_min - 273.15)}\r\n                  &#176;C\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <p>\r\n                  max: {Math.round(weather?.main?.temp_max - 273.15)}\r\n                  &#176;C\r\n                </p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"row__flex\">\r\n            <p>Humidity: {weather.main?.humidity} %</p>\r\n            <p>Pressure: {weather.main?.pressure} mb</p>\r\n            <p>Wind: {weather?.wind?.speed} km/h</p>\r\n          </div>\r\n          <div>\r\n            <p className=\"sunrise-sunset\">\r\n              Sunrise:{\" \"}\r\n              {new Date(weather.sys?.sunrise * 1000).toLocaleTimeString(\r\n                \"en-IN\"\r\n              )}\r\n            </p>\r\n            <p className=\"sunrise-sunset\">\r\n              Sunset:{\" \"}\r\n              {new Date(weather.sys?.sunset * 1000).toLocaleTimeString(\"en-IN\")}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <NavLink\r\n          to={{\r\n            pathname: `${url}/FiveDays`,\r\n            state: { from: location },\r\n          }}\r\n        >\r\n          <button className=\"button\" type=\"button\">\r\n            Load More\r\n          </button>\r\n        </NavLink>\r\n        <br />\r\n      </div>\r\n      <Suspense\r\n        fallback={\r\n          <Loader\r\n            type=\"ThreeDots\"\r\n            color=\"teal\"\r\n            height={300}\r\n            width={300}\r\n            timeout={3000}\r\n          />\r\n        }\r\n      >\r\n        <Route path={`${url}/FiveDays`}>\r\n          {weather && (\r\n            <FiveDays lon={weather?.coord?.lon} lat={weather?.coord?.lat} />\r\n          )}\r\n        </Route>\r\n      </Suspense>\r\n    </main>\r\n  );\r\n}\r\n"],"sourceRoot":""}