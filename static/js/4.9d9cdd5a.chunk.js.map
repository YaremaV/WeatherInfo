{"version":3,"sources":["API/weather-api.js","component/FiveDays/FiveDays.js","views/Information/Information.js"],"names":["BASE_URL","KEY","fetchWithErrorHandling","a","url","fetch","response","ok","json","Promise","reject","Error","fetchSearch","cityName","fetchDetails","id","FiveDays","infoId","useState","days","data","Date","console","log","map","day","toDateString","dt","Math","round","main","temp","alt","src","weather","value","icon","description","humidity","pressure","wind","speed","Information","setWeather","useRouteMatch","useParams","location","useLocation","useEffect","moviesApi","then","className","name","sys","country","feels_like","temp_min","temp_max","sunrise","toLocaleTimeString","sunset","to","pathname","state","from","type","fallback","color","height","width","timeout","path"],"mappings":"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","file":"static/js/4.9d9cdd5a.chunk.js","sourcesContent":["const BASE_URL = \"HTTPS://api.openweathermap.org/data/2.5/\";\r\nconst KEY = \"2d20223674e609e0aa7b3ad29d181f8b\";\r\n\r\nasync function fetchWithErrorHandling(url = \"\") {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error(\"Not found\"));\r\n}\r\n\r\nexport function fetchSearch(cityName) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}weather?q=${cityName}&appid=${KEY}`\r\n  );\r\n}\r\n\r\nexport function fetchDetails(id) {\r\n  return fetchWithErrorHandling(`${BASE_URL}weather?id=${id}&appid=${KEY}`);\r\n}\r\n\r\nexport function fetchFewDays(id) {\r\n  return fetchWithErrorHandling(\r\n    `${BASE_URL}forecast/daily?id=${id}&appid=${KEY}`\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport * as moviesApi from \"../../API/weather-api\";\r\n\r\nexport default function FiveDays({ infoId }) {\r\n  const [days, setDays] = useState([]);\r\n  const data = new Date();\r\n\r\n  // useEffect(() => {\r\n  //   moviesApi.fetchFewDays(infoId).then((res) => setDays(res.list));\r\n  // }, [infoId]);\r\n  return (\r\n    <>\r\n      {console.log(days)}\r\n      <ul>\r\n        {days &&\r\n          days?.map((day) => (\r\n            <li>\r\n              <h3>{data.toDateString(day.dt)}</h3>\r\n              <h1>{Math.round(day?.main?.temp - 273.15)} &#176;C</h1>\r\n              <img\r\n                alt={\"Weather Condition and City\"}\r\n                src={`HTTPS://openweathermap.org/img/wn/${day?.weather?.map(\r\n                  (value) => value.icon\r\n                )}@2x.png`}\r\n              />\r\n              <p>{day?.weather?.map((value) => value.main)}</p>\r\n              <p>{day?.weather?.map((value) => value.description)}</p>\r\n              <p>Humidity: {day.main?.humidity}%</p>\r\n              <p>Pressure: {day.main?.pressure} мм рт. ст.</p>\r\n              <p>Wind: {day?.wind?.speed}</p>\r\n            </li>\r\n          ))}\r\n      </ul>\r\n    </>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport {\r\n  useParams,\r\n  Route,\r\n  useRouteMatch,\r\n  useHistory,\r\n  useLocation,\r\n} from \"react-router\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { lazy, Suspense } from \"react\";\r\nimport * as moviesApi from \"../../API/weather-api\";\r\nimport FiveDays from \"../../component/FiveDays/FiveDays\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"./information.css\";\r\n\r\nexport default function Information() {\r\n  const [weather, setWeather] = useState([]);\r\n  const { url } = useRouteMatch();\r\n  const { infoId } = useParams();\r\n  const data = new Date();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    moviesApi.fetchDetails(infoId).then(setWeather);\r\n  }, [infoId]);\r\n\r\n  return (\r\n    <main>\r\n      {weather && (\r\n        <div className=\"cards__thumb \">\r\n          <div className=\"line__flex\">\r\n            <div>\r\n              <h3>{data.toDateString(weather.dt)}</h3>\r\n              <h2>\r\n                {weather.name}\r\n                <sup className=\"sup\">{weather?.sys?.country}</sup>\r\n              </h2>\r\n              <h3>{Math.round(weather?.main?.temp - 273.15)} &#176;C</h3>\r\n            </div>\r\n            <div className=\"row__flex\">\r\n              <p>{weather?.weather?.map((value) => value.main)}</p>\r\n              <img\r\n                alt={\"Weather Condition and City\"}\r\n                src={`HTTPS://openweathermap.org/img/wn/${weather?.weather?.map(\r\n                  (value) => value.icon\r\n                )}@2x.png`}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"row__flex\">\r\n            <ul>\r\n              <li>\r\n                <p>\r\n                  Feels like: {Math.round(weather?.main?.feels_like - 273.15)}\r\n                  &#176;C\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <p>\r\n                  min: {Math.round(weather?.main?.temp_min - 273.15)}\r\n                  &#176;C\r\n                </p>\r\n              </li>\r\n              <li>\r\n                <p>\r\n                  max: {Math.round(weather?.main?.temp_max - 273.15)}\r\n                  &#176;C\r\n                </p>\r\n              </li>\r\n            </ul>\r\n          </div>\r\n          <div className=\"row__flex\">\r\n            <p>Humidity: {weather.main?.humidity}%</p>\r\n            <p>Pressure: {weather.main?.pressure} mb</p>\r\n            <p>Wind: {weather?.wind?.speed}km/h</p>\r\n          </div>\r\n          <div>\r\n            <p className=\"sunrise-sunset\">\r\n              Sunrise:{\" \"}\r\n              {new Date(weather.sys?.sunrise * 1000).toLocaleTimeString(\r\n                \"en-IN\"\r\n              )}\r\n            </p>\r\n            <p className=\"sunrise-sunset\">\r\n              Sunset:{\" \"}\r\n              {new Date(weather.sys?.sunset * 1000).toLocaleTimeString(\"en-IN\")}\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div>\r\n        <NavLink\r\n          to={{\r\n            pathname: `${url}/FiveDays`,\r\n            state: { from: location },\r\n          }}\r\n        >\r\n          <button type=\"button\">Few Days</button>\r\n        </NavLink>\r\n        <br />\r\n      </div>\r\n      <Suspense\r\n        fallback={\r\n          <Loader\r\n            type=\"ThreeDots\"\r\n            color=\"teal\"\r\n            height={300}\r\n            width={300}\r\n            timeout={3000}\r\n          />\r\n        }\r\n      >\r\n        <Route path={`${url}/FiveDays`}>\r\n          {weather && <FiveDays infoId={infoId} />}\r\n        </Route>\r\n      </Suspense>\r\n    </main>\r\n  );\r\n}\r\n"],"sourceRoot":""}